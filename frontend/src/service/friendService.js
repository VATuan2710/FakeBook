import instance from './index.js';

// üöÄ Friend Request Functions

// G·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n
export const sendFriendRequest = async (senderId, receiverId) => {
  try {
    const response = await instance.post('/friend/request', {
      sender: senderId,
      receiver: receiverId
    });
    return response.data;
  } catch (error) {
    console.error('Error sending friend request:', error);
    throw error.response?.data || { message: 'L·ªói khi g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n' };
  }
};

// Ch·∫•p nh·∫≠n l·ªùi m·ªùi k·∫øt b·∫°n
export const acceptFriendRequest = async (requestId) => {
  try {
    const response = await instance.put(`/friend/request/${requestId}/accept`);
    return response.data;
  } catch (error) {
    console.error('Error accepting friend request:', error);
    throw error.response?.data || { message: 'L·ªói khi ch·∫•p nh·∫≠n l·ªùi m·ªùi' };
  }
};

// T·ª´ ch·ªëi l·ªùi m·ªùi k·∫øt b·∫°n
export const declineFriendRequest = async (requestId) => {
  try {
    const response = await instance.delete(`/friend/request/${requestId}/decline`);
    return response.data;
  } catch (error) {
    console.error('Error declining friend request:', error);
    throw error.response?.data || { message: 'L·ªói khi t·ª´ ch·ªëi l·ªùi m·ªùi' };
  }
};

// H·ªßy l·ªùi m·ªùi k·∫øt b·∫°n ƒë√£ g·ª≠i
export const cancelFriendRequest = async (senderId, receiverId) => {
  try {
    const response = await instance.delete('/friend/request/cancel', {
      data: { sender: senderId, receiver: receiverId }
    });
    return response.data;
  } catch (error) {
    console.error('Error canceling friend request:', error);
    throw error.response?.data || { message: 'L·ªói khi h·ªßy l·ªùi m·ªùi' };
  }
};

// üë• Friend Management Functions

// L·∫•y danh s√°ch b·∫°n b√®
export const getFriends = async (userId) => {
  try {
    const response = await instance.get(`/friend/${userId}`);
    return response.data;
  } catch (error) {
    console.error('Error getting friends:', error);
    throw error.response?.data || { message: 'L·ªói khi l·∫•y danh s√°ch b·∫°n b√®' };
  }
};

// X√≥a b·∫°n b√®
export const removeFriend = async (userId, friendId) => {
  try {
    const response = await instance.delete('/friend/remove', {
      data: { userId, friendId }
    });
    return response.data;
  } catch (error) {
    console.error('Error removing friend:', error);
    throw error.response?.data || { message: 'L·ªói khi x√≥a b·∫°n b√®' };
  }
};

// L·∫•y l·ªùi m·ªùi k·∫øt b·∫°n ƒë√£ nh·∫≠n
export const getReceivedFriendRequests = async (userId) => {
  try {
    const response = await instance.get(`/friend/${userId}/requests/received`);
    return response.data;
  } catch (error) {
    console.error('Error getting received requests:', error);
    throw error.response?.data || { message: 'L·ªói khi l·∫•y l·ªùi m·ªùi ƒë√£ nh·∫≠n' };
  }
};

// L·∫•y l·ªùi m·ªùi k·∫øt b·∫°n ƒë√£ g·ª≠i
export const getSentFriendRequests = async (userId) => {
  try {
    const response = await instance.get(`/friend/${userId}/requests/sent`);
    return response.data;
  } catch (error) {
    console.error('Error getting sent requests:', error);
    throw error.response?.data || { message: 'L·ªói khi l·∫•y l·ªùi m·ªùi ƒë√£ g·ª≠i' };
  }
};

// üîç Friend Discovery Functions

// Ki·ªÉm tra tr·∫°ng th√°i k·∫øt b·∫°n
export const checkFriendship = async (user1, user2) => {
  try {
    const response = await instance.get(`/friend/check/${user1}/${user2}`);
    return response.data;
  } catch (error) {
    console.error('Error checking friendship:', error);
    throw error.response?.data || { message: 'L·ªói khi ki·ªÉm tra tr·∫°ng th√°i' };
  }
};

// L·∫•y b·∫°n chung
export const getMutualFriends = async (user1, user2) => {
  try {
    const response = await instance.get(`/friend/mutual/${user1}/${user2}`);
    return response.data;
  } catch (error) {
    console.error('Error getting mutual friends:', error);
    throw error.response?.data || { message: 'L·ªói khi l·∫•y b·∫°n chung' };
  }
};

// T√¨m ki·∫øm ng∆∞·ªùi d√πng
export const searchUsers = async (query, userId) => {
  try {
    const response = await instance.get('/friend/search/users', {
      params: { query, userId }
    });
    return response.data;
  } catch (error) {
    console.error('Error searching users:', error);
    throw error.response?.data || { message: 'L·ªói khi t√¨m ki·∫øm ng∆∞·ªùi d√πng' };
  }
};

// üéØ Helper Functions

// Format t√™n hi·ªÉn th·ªã
export const getDisplayName = (user) => {
  if (user.displayName && user.displayName !== 'New User') {
    return user.displayName;
  }
  if (user.firstName && user.lastName) {
    return `${user.firstName} ${user.lastName}`;
  }
  return user.username || 'Unknown User';
};

// Format th·ªùi gian online
export const getOnlineStatus = (user) => {
  if (!user.lastSeen) return 'offline';
  
  const now = new Date();
  const lastSeen = new Date(user.lastSeen);
  const diffMinutes = Math.floor((now - lastSeen) / (1000 * 60));
  
  if (user.status === 'online' || diffMinutes <= 5) {
    return 'online';
  } else if (diffMinutes <= 30) {
    return 'recently';
  } else {
    return 'offline';
  }
};

// Format n√∫t friend request d·ª±a tr√™n status
export const getFriendButtonConfig = (status) => {
  switch (status) {
    case 'friends':
      return { text: 'B·∫°n b√®', variant: 'success', disabled: false };
    case 'sent':
      return { text: 'ƒê√£ g·ª≠i l·ªùi m·ªùi', variant: 'secondary', disabled: true };
    case 'received':
      return { text: 'Ch·∫•p nh·∫≠n', variant: 'primary', disabled: false };
    case 'none':
    default:
      return { text: 'K·∫øt b·∫°n', variant: 'primary', disabled: false };
  }
};

export default {
  sendFriendRequest,
  acceptFriendRequest,
  declineFriendRequest,
  cancelFriendRequest,
  getFriends,
  removeFriend,
  getReceivedFriendRequests,
  getSentFriendRequests,
  checkFriendship,
  getMutualFriends,
  searchUsers,
  getDisplayName,
  getOnlineStatus,
  getFriendButtonConfig
};
