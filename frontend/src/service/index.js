import axios from "axios";

const instance = axios.create({
  baseURL: "http://127.0.0.1:8080/api",
  timeout: 15000,
  headers: {
    "Content-Type": "application/json",
  },
  withCredentials: true,
});

// Interceptor cho request
instance.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem("token");
    if (token) {
      config.headers["Authorization"] = `Bearer ${token}`;
    }
    console.log("üì° API Request:", config.method?.toUpperCase(), config.url);
    return config;
  },
  (error) => {
    console.error("‚ùå Request Error:", error);
    return Promise.reject(error);
  }
);

// Interceptor cho response
instance.interceptors.response.use(
  (response) => {
    console.log("‚úÖ API Response:", response.status, response.config.url);
    return response;
  },
  async (error) => {
    const originalRequest = error.config;
    
    console.error("‚ùå API Error:", {
      status: error.response?.status,
      message: error.response?.data?.message || error.message,
      url: error.config?.url
    });

    // X·ª≠ l√Ω l·ªói 401 (Unauthorized)
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;
      
      console.log("üîÑ Attempting to refresh token...");

      try {
        const refreshResponse = await instance.post("/auth/refresh-token");
        const newAccessToken = refreshResponse.data.accessToken;

        localStorage.setItem("token", newAccessToken);
        originalRequest.headers["Authorization"] = `Bearer ${newAccessToken}`;
        
        console.log("‚úÖ Token refreshed successfully");
        return instance(originalRequest);
      } catch (refreshError) {
        console.error("‚ùå Token refresh failed:", refreshError);
        
        // X√≥a token c≈© v√† chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang login
        localStorage.removeItem("token");
        localStorage.removeItem("user");
        
        // Th√¥ng b√°o cho user
        alert("Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
        
        // Chuy·ªÉn h∆∞·ªõng sau 1 gi√¢y
        setTimeout(() => {
          window.location.href = "/login";
        }, 1000);
        
        return Promise.reject(refreshError);
      }
    }

    // X·ª≠ l√Ω c√°c l·ªói kh√°c
    if (error.response?.status === 403) {
      alert("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p t√†i nguy√™n n√†y!");
    } else if (error.response?.status === 404) {
      console.error("‚ùå API endpoint not found:", error.config?.url);
    } else if (error.response?.status >= 500) {
      alert("L·ªói server! Vui l√≤ng th·ª≠ l·∫°i sau.");
    }

    return Promise.reject(error);
  }
);

export default instance;
